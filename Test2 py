import json
import numpy as np
from rpcfit.rpc_fit import calibrate_rpc
from rpcm.rpc_model import RPCModel

# === Fonction de rotation de la scène autour de son centre ===
def rotate_scene(points_3d, center, angle_rad):
    """Rotation horizontale (2D) autour du centre (lon, lat)."""
    R = np.array([
        [np.cos(angle_rad), -np.sin(angle_rad), 0],
        [np.sin(angle_rad),  np.cos(angle_rad), 0],
        [0,                  0,                 1]
    ])
    return (R @ (points_3d - center).T).T + center

# === Charger le fichier JSON avec RPC original ===
with open("JAX_214_007_RGB.json", "r") as f:
    data = json.load(f)

rpc = RPCModel(data["rpc"], dict_format="rpcm")

# === Centre de la scène ===
center = np.array([rpc.lon_offset, rpc.lat_offset, rpc.alt_offset])

# === Générer une grille de points 3D autour du centre ===
num_xy, num_z = 10, 3
lon_vals = np.linspace(-rpc.lon_scale * 0.2, rpc.lon_scale * 0.2, num_xy) + center[0]
lat_vals = np.linspace(-rpc.lat_scale * 0.2, rpc.lat_scale * 0.2, num_xy) + center[1]
alt_vals = np.linspace(-rpc.alt_scale * 0.05, rpc.alt_scale * 0.05, num_z) + center[2]

lon, lat, alt = np.meshgrid(lon_vals, lat_vals, alt_vals)
scene_points = np.stack([lon.ravel(), lat.ravel(), alt.ravel()], axis=1)

# === Définir les angles de rotation autour de la scène ===
num_poses = 8
azimuths = np.linspace(0, 2 * np.pi, num_poses, endpoint=False)

for i, az in enumerate(azimuths):
    # === Tourner la scène (pas le modèle) ===
    rotated_scene = rotate_scene(scene_points, center, az)

    # === Projeter les points tournés avec le modèle RPC d'origine ===
    projected_2d = np.array([rpc.projection(*p) for p in rotated_scene])
    projected_2d = np.flip(projected_2d, axis=1)  # (col, row)

    # === Calibrer un nouveau RPC à partir des correspondances ===
    rpc_new = calibrate_rpc(
        target=projected_2d,
        input_locs=scene_points,  # Toujours les points d’origine
        separate=True,
        orientation="projection",
        init=rpc
    )

    # === Convertir en dictionnaire JSON au format RPCM ===
    rpc_dict = {
        "row_offset": rpc_new.row_offset,
        "col_offset": rpc_new.col_offset,
        "lat_offset": rpc_new.lat_offset,
        "lon_offset": rpc_new.lon_offset,
        "alt_offset": rpc_new.alt_offset,
        "row_scale": rpc_new.row_scale,
        "col_scale": rpc_new.col_scale,
        "lat_scale": rpc_new.lat_scale,
        "lon_scale": rpc_new.lon_scale,
        "alt_scale": rpc_new.alt_scale,
        "row_num": list(rpc_new.row_num),
        "row_den": list(rpc_new.row_den),
        "col_num": list(rpc_new.col_num),
        "col_den": list(rpc_new.col_den)
    }

    # === Sauvegarder dans un fichier JSON ===
    rpc_json = data.copy()
    rpc_json["rpc"] = rpc_dict

    out_name = f"JAX_214_007_RGB_pose_{i:02}.json"
    with open(out_name, "w") as f:
        json.dump(rpc_json, f, indent=2)

    print(f"✅ Pose RPC simulée #{i} sauvegardée : {out_name}")
