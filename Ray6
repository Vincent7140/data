from sat_utils import latlon_to_ecef_custom, ecef_to_latlon_custom

def displace_rays_by_geo_offset(rays, lat_shift=0, lon_shift=0, alt_shift=0):
    rays = rays.clone()
    rays_o = rays[:, 0:3].cpu().numpy()
    rays_d = rays[:, 3:6].cpu().numpy()
    fars = rays[:, 7].cpu().numpy()

    rays_far = rays_o + rays_d * fars[:, None]

    # Convert to lat/lon/alt
    lats_o, lons_o, alts_o = ecef_to_latlon_custom(rays_o[:, 0], rays_o[:, 1], rays_o[:, 2])
    lats_f, lons_f, alts_f = ecef_to_latlon_custom(rays_far[:, 0], rays_far[:, 1], rays_far[:, 2])

    # Apply shifts
    lats_o += lat_shift
    lons_o += lon_shift
    alts_o += alt_shift

    lats_f += lat_shift
    lons_f += lon_shift
    alts_f += alt_shift

    # Convert back to ECEF
    x_o, y_o, z_o = latlon_to_ecef_custom(lats_o, lons_o, alts_o)
    x_f, y_f, z_f = latlon_to_ecef_custom(lats_f, lons_f, alts_f)

    rays_o_new = np.stack([x_o, y_o, z_o], axis=-1)
    rays_f_new = np.stack([x_f, y_f, z_f], axis=-1)

    # Recompute direction and fars
    d = rays_f_new - rays_o_new
    rays_d_new = d / np.linalg.norm(d, axis=1, keepdims=True)
    fars_new = np.linalg.norm(d, axis=1)

    rays[:, 0:3] = torch.from_numpy(rays_o_new)
    rays[:, 3:6] = torch.from_numpy(rays_d_new)
    rays[:, 6] = 0
    rays[:, 7] = torch.from_numpy(fars_new)

    return rays
